# -*- coding: utf-8 -*-
"""task1.2_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soExmfBLZsG7ijU3hsRyEK51z5mtVoFw

# Module Imports
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
import seaborn as sns
# sns.set_theme(style="darkgrid")

"""# Mount Drive"""

from google.colab import drive
drive.mount('/content/drive')

"""## EDA
Use Mode method to fill the missing datapoints of all 'object' type features and Mean/Median methods for all numuric type features.
*   use Median method for skewed(negative/positive) numeric feature and 
*   use MEAN/Median for non-skewd/symetrical numeric feature

### Read Data
"""

import warnings
warnings.filterwarnings('ignore')
pd.set_option('max_column', None)
db = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Week 2/data/AdSmartABdata.csv', na_values=['undefined','?', None])

db

db.columns

db.dtypes

"""#### The dataset is 8077x9 with 5 object type and 4 int64 type columns

### Utility Functions
"""

def percent_missing(df):

    # Calculate total number of cells in dataframe
    totalCells = np.product(df.shape)

    # Count number of missing values per column
    missingCount = df.isnull().sum()

    # Calculate total number of missing values
    totalMissing = missingCount.sum()

    # Calculate percentage of missing values
    print("The dataset contains", round(((totalMissing/totalCells) * 100), 3), "%", "missing values.")


# Function to calculate missing values by column
def missing_values_table(df):
    # Total missing values
    mis_val = df.isnull().sum()

    # Percentage of missing values
    mis_val_percent = 100 * df.isnull().sum() / len(df)

    # dtype of missing values
    mis_val_dtype = df.dtypes

    # Make a table with the results
    mis_val_table = pd.concat([mis_val, mis_val_percent, mis_val_dtype], axis=1)

    # Rename the columns
    mis_val_table_ren_columns = mis_val_table.rename(
    columns = {0 : 'Missing Values', 1 : '% of Total Values', 2: 'Dtype'})

    # Sort the table by percentage of missing descending
    mis_val_table_ren_columns = mis_val_table_ren_columns[
        mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(
    '% of Total Values', ascending=False).round(2)

    # Print some summary information
    print ("Your selected dataframe has " + str(df.shape[1]) + " columns.\n"      
        "There are " + str(mis_val_table_ren_columns.shape[0]) +
          " columns that have missing values.")

    # Return the dataframe with missing information
    return mis_val_table_ren_columns


###################################PLOTTING FUNCTIONS###################################

def plot_hist(df:pd.DataFrame, column:str, color:str)->None:
    # plt.figure(figsize=(15, 10))
    # fig, ax = plt.subplots(1, figsize=(12, 7))
    sns.displot(data=df, x=column, color=color, kde=True, height=7, aspect=2)
    plt.title(f'Distribution of {column}', size=20, fontweight='bold')
    plt.show()

def plot_count(df:pd.DataFrame, column:str) -> None:
    plt.figure(figsize=(12, 7))
    sns.countplot(data=df, x=column)
    plt.title(f'Distribution of {column}', size=20, fontweight='bold')
    plt.show()
    
def plot_bar(df:pd.DataFrame, x_col:str, y_col:str, title:str, xlabel:str, ylabel:str)->None:
    plt.figure(figsize=(12, 7))
    sns.barplot(data = df, x=x_col, y=y_col)
    plt.title(title, size=20)
    plt.xticks(rotation=75, fontsize=14)
    plt.yticks( fontsize=14)
    plt.xlabel(xlabel, fontsize=16)
    plt.ylabel(ylabel, fontsize=16)
    plt.show()

def plot_heatmap(df:pd.DataFrame, title:str, cbar=False)->None:
    plt.figure(figsize=(12, 7))
    sns.heatmap(df, annot=True, cmap='viridis', vmin=0, vmax=1, fmt='.2f', linewidths=.7, cbar=cbar )
    plt.title(title, size=18, fontweight='bold')
    plt.show()

def plot_box(df:pd.DataFrame, x_col:str, title:str) -> None:
    plt.figure(figsize=(12, 7))
    sns.boxplot(data = df, x=x_col)
    plt.title(title, size=20)
    plt.xticks(rotation=75, fontsize=14)
    plt.show()

def plot_box_multi(df:pd.DataFrame, x_col:str, y_col:str, title:str) -> None:
    plt.figure(figsize=(12, 7))
    sns.boxplot(data = df, x=x_col, y=y_col)
    plt.title(title, size=20)
    plt.xticks(rotation=75, fontsize=14)
    plt.yticks( fontsize=14)
    plt.show()

def plot_scatter(df: pd.DataFrame, x_col: str, y_col: str, title: str, hue: str, style: str) -> None:
    plt.figure(figsize=(12, 7))
    sns.scatterplot(data = df, x=x_col, y=y_col, hue=hue, style=style)
    plt.title(title, size=20)
    plt.xticks(fontsize=14)
    plt.yticks( fontsize=14)
    plt.show()


# pd.options.display.float_format = format_float

"""### Missing Values"""

percent_missing(db)

missing_values_table(db)

"""#### The dataset has no missing values

### Unique Values
* Categorical data
* Numeric Data
"""

def Select_categorical_numeric(df:pd.DataFrame):
  global categorical_col 
  categorical_col = []
  global numeric_col
  numeric_col = []
  for column in df.columns:
    if df[column].dtypes == "object":
      categorical_col.append(column)
    if df[column].dtypes == "int64":
      numeric_col.append(column)
  print(f"Categorical Columns: {categorical_col}")
  print(f"Numeric Columns: {numeric_col}")

"""### Categorical and Numeric Columns"""

Select_categorical_numeric(db)

"""## Count Unique Values of Variables

#### Each column combination is unique in the dataset
"""

db.value_counts(normalize=False, sort=True, ascending=False, dropna=True)
# db.no.nunique()#(axis=1, dropna=True) # also works

"""### Unique Values of each Variable"""

for column in db.columns:
  print(f"{column} has {db[column].nunique()} unique values.")

"""### Statistical Variable Relationship Visualization 
* To analyse brand awarness, the important features of the dataset are 
> * experiment
> * yes and 
> * no 
* The important yes/no combinations for awarness analysis are 
> * yes = 1 - no = 0 and 
> * yes = 0 - yes = 1



"""

db_explore = db[["auction_id","experiment", "yes", "no"]]

"""### Dataset for Awareness Analysis
* awareness = 1 if yes = 1 and no = 0
* awareness = 0 if yes = 0 and no = 1
* invalid data if yes = 1 and no = 1
* not relevant if yes =0 and no = 0
"""

db_awareness = db_explore.query("not ((yes == 0 & no == 0) or (yes == 1 & no == 1))")
db_awareness

db_awareness["aware"] = db_awareness["yes"]
db_awareness["not aware"] = db_awareness["no"]
db_awareness.drop(columns = ['yes','no'], inplace = True)
db_awareness

db_awareness_summary = db_awareness.pivot_table( index='experiment', aggfunc='sum')
# db_awareness_summary["total"] = db_awareness.pivot_table( index='experiment', aggfunc='count')
db_awareness_summary

db_awareness_summary.columns

"""### Experiment-Yes Relationships"""

sns.relplot(x="experiment", y="aware", hue="not aware", data =db_awareness_summary)# style="smoker",data=db);

db_awareness_summary['aware']

sns.relplot(x="experiment", y="not aware", hue="aware", data =db_awareness_summary)# style="smoker",data=db);

db_awareness_summary["not aware"]

db_awareness_summary['aware']['control']

db_awareness_summary['not aware']['control']

plt.hist(db_awareness_summary['aware']['control'])

